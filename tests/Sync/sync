#!/usr/bin/env php
<?php

namespace Lkrms\Tests\Sync;

use Lkrms\Facade\App;
use Lkrms\Console\Console;
use Lkrms\Sync\Provider\SyncEntityProvider;
use Lkrms\Sync\SyncEntityFuzzyResolver;
use Lkrms\Sync\SyncEntityResolver;
use Lkrms\Sync\SyncOperation;
use Lkrms\Tests\Sync\Entity\Post;
use Lkrms\Tests\Sync\Entity\PostProvider;
use Lkrms\Tests\Sync\Entity\User;
use Lkrms\Tests\Sync\Entity\UserProvider;
use Lkrms\Tests\Sync\Provider\JsonPlaceholderApi;
use Throwable;

$loader = require (__DIR__ . "/../../vendor/autoload.php");
$loader->addPsr4("Lkrms\\Tests\\", __DIR__ . "/..");

$app = App::load(dirname(__DIR__));
$app->enableCache();

// Register JsonPlaceholderApi as the provider for Post and User objects
$app->bind(PostProvider::class, JsonPlaceholderApi::class);
$app->bind(UserProvider::class, JsonPlaceholderApi::class);

$userApi = new SyncEntityProvider(User::class);

$posts = iterator_to_array(Post::backend()->getList());
Console::info("Posts retrieved:", (string)count($posts));

/** @var Post */
$post = reset($posts);
/** @var User */
$user      = User::backend()->get($post->User->Id);
$postClone = clone $post;
$userClone = clone $user;

// Nested objects aren't cloned. Arrays, on the other hand...
$post->User->Name    = "New Name Who Dis";
$user->Company["bs"] = "no-bs-here";

print_r([
    '$post == $postClone (FALSE)'             => $post == $postClone,
    '$post->User == $postClone->User (TRUE)'  => $post->User == $postClone->User,
    '$post->User === $postClone->User (TRUE)' => $post->User === $postClone->User,
    '$user == $userClone (FALSE)'             => $user == $userClone,
    '$user->Company == $userClone->Company (FALSE)'  => $user->Company == $userClone->Company,
    '$user->Company === $userClone->Company (FALSE)' => $user->Company === $userClone->Company,
    // @phpstan-ignore-next-line
    '$user->Website == $userClone->Website (FALSE)' => $user->Website == $userClone->Website,
]);

$resolver       = new SyncEntityResolver($userApi, "Name");
$fuzzyResolver  = new SyncEntityFuzzyResolver($userApi, "Name", null, null, 0.6);
$fuzzyResolver2 = new SyncEntityFuzzyResolver($userApi, "Name", null, SyncEntityFuzzyResolver::ALGORITHM_SIMILAR_TEXT, 0.6);

$byName          = $resolver->getByName("Leanne Graham");
$closestByName1a = $fuzzyResolver->getByName("leanne graham", $uncertainty1a);
$closestByName1b = $fuzzyResolver->getByName("GRAHAM, leanne", $uncertainty1b);
$closestByName1c = $fuzzyResolver->getByName("Lee-Anna Graham", $uncertainty1c);
$closestByName2a = $fuzzyResolver2->getByName("leanne graham", $uncertainty2a);
$closestByName2b = $fuzzyResolver2->getByName("GRAHAM, leanne", $uncertainty2b);
$closestByName2c = $fuzzyResolver2->getByName("Lee-Anna Graham", $uncertainty2c);

print_r([
    'byName'          => $byName->Name ?? null,
    'closestByName1a' => $closestByName1a->Name ?? null,
    'closestByName1b' => $closestByName1b->Name ?? null,
    'closestByName1c' => $closestByName1c->Name ?? null,
    'closestByName2a' => $closestByName2a->Name ?? null,
    'closestByName2b' => $closestByName2b->Name ?? null,
    'closestByName2c' => $closestByName2c->Name ?? null,
    'uncertainty1a'   => $uncertainty1a,
    'uncertainty1b'   => $uncertainty1b,
    'uncertainty1c'   => $uncertainty1c,
    'uncertainty2a'   => $uncertainty2a,
    'uncertainty2b'   => $uncertainty2b,
    'uncertainty2c'   => $uncertainty2c,
]);

$exceptions = [];

$ops = [];

try
{
    foreach ([
        SyncOperation::CREATE,
        SyncOperation::READ,
        SyncOperation::UPDATE,
        SyncOperation::DELETE,
        SyncOperation::CREATE_LIST,
        SyncOperation::READ_LIST,
        SyncOperation::UPDATE_LIST,
        SyncOperation::DELETE_LIST,
        -1,
    ] as $op)
    {
        $ops[$op] = SyncOperation::toName($op);
    }
}
catch (Throwable $ex)
{
    $exceptions[] = $ex;
}

try
{
    Post::backend()->create($app->get(Post::class));
}
catch (Throwable $ex)
{
    $exceptions[] = $ex;
}

print_r([
    "ops"        => $ops,
    "exceptions" => array_map(function (Throwable $ex) { return $ex->getMessage(); }, $exceptions),
]);
