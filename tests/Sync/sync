#!/usr/bin/env php
<?php

namespace Lkrms\Tests\Sync;

use Lkrms\Facade\App;
use Lkrms\Facade\Console;
use Lkrms\Facade\Sync;
use Lkrms\Sync\Support\SyncContext;
use Lkrms\Sync\Support\SyncEntityFuzzyResolver;
use Lkrms\Sync\Support\SyncEntityResolver;
use Lkrms\Sync\Support\SyncOperation;
use Lkrms\Tests\Sync\Entity\Post;
use Lkrms\Tests\Sync\Entity\User;
use Lkrms\Tests\Sync\Provider\JsonPlaceholderApi;
use Throwable;

$loader = require __DIR__ . '/../../vendor/autoload.php';
$loader->addPsr4('Lkrms\\Tests\\', __DIR__ . '/..');

// Register JsonPlaceholderApi as the provider for Post and User objects
$app = App::load(dirname(__DIR__))
           ->loadCache()
           ->loadSync()
           ->syncNamespace('lkrms-tests', 'https://lkrms.github.io/php-util/tests/entity', \Lkrms\Tests\Sync\Entity::class)
           ->service(JsonPlaceholderApi::class);

$userApi = User::withDefaultProvider($app);

$provider     = Post::defaultProvider();
$context      = (new SyncContext($provider->container()))->withArrays();
$postProvider = $provider->with(Post::class, $context);
$posts        = $postProvider->getList();
//\PHPStan\dumpType($context);
//\PHPStan\dumpType($postProvider);
//\PHPStan\dumpType($posts);
Console::info('Posts retrieved:', (string) count($posts));

/** @var Post */
$post = reset($posts);
/** @var User */
$user = User::withDefaultProvider()->get($post->User->Id);

print_r([
    'Sync::getRunId()'               => Sync::getRunId(),
    'Sync::getRunUuid()'             => Sync::getRunUuid(),
    'Sync::getEntityTypeUri()'       => Sync::getEntityTypeUri(User::class),
    'Sync::getEntityTypeUri(,false)' => Sync::getEntityTypeUri(User::class, false),
]);

$resolver       = new SyncEntityResolver($userApi, 'Name');
$fuzzyResolver  = new SyncEntityFuzzyResolver($userApi, 'Name', null, null, 0.6);
$fuzzyResolver2 = new SyncEntityFuzzyResolver($userApi, 'Name', null, SyncEntityFuzzyResolver::ALGORITHM_SIMILAR_TEXT, 0.6);

/** @var User|null */
$byName          = $resolver->getByName('Leanne Graham');
/** @var User|null */
$closestByName1a = $fuzzyResolver->getByName('leanne graham', $uncertainty1a);
/** @var User|null */
$closestByName1b = $fuzzyResolver->getByName('GRAHAM, leanne', $uncertainty1b);
/** @var User|null */
$closestByName1c = $fuzzyResolver->getByName('Lee-Anna Graham', $uncertainty1c);
/** @var User|null */
$closestByName2a = $fuzzyResolver2->getByName('leanne graham', $uncertainty2a);
/** @var User|null */
$closestByName2b = $fuzzyResolver2->getByName('GRAHAM, leanne', $uncertainty2b);
/** @var User|null */
$closestByName2c = $fuzzyResolver2->getByName('Lee-Anna Graham', $uncertainty2c);

print_r([
    'byName'          => $byName->Name ?? null,
    'closestByName1a' => $closestByName1a->Name ?? null,
    'closestByName1b' => $closestByName1b->Name ?? null,
    'closestByName1c' => $closestByName1c->Name ?? null,
    'closestByName2a' => $closestByName2a->Name ?? null,
    'closestByName2b' => $closestByName2b->Name ?? null,
    'closestByName2c' => $closestByName2c->Name ?? null,
    'uncertainty1a'   => $uncertainty1a,
    'uncertainty1b'   => $uncertainty1b,
    'uncertainty1c'   => $uncertainty1c,
    'uncertainty2a'   => $uncertainty2a,
    'uncertainty2b'   => $uncertainty2b,
    'uncertainty2c'   => $uncertainty2c,
]);

$exceptions = [];

$ops = [];

try {
    foreach ([
        SyncOperation::CREATE,
        SyncOperation::READ,
        SyncOperation::UPDATE,
        SyncOperation::DELETE,
        SyncOperation::CREATE_LIST,
        SyncOperation::READ_LIST,
        SyncOperation::UPDATE_LIST,
        SyncOperation::DELETE_LIST,
        -1,
    ] as $op) {
        $ops[$op] = SyncOperation::toName($op);
    }
} catch (Throwable $ex) {
    $exceptions[] = $ex;
}

try {
    Post::withDefaultProvider()->create($app->get(Post::class));
} catch (Throwable $ex) {
    $exceptions[] = $ex;
}

print_r([
    'ops'        => $ops,
    'exceptions' => array_map(function (Throwable $ex) { return $ex->getMessage(); }, $exceptions),
]);

Sync::close(0);
