#!/usr/bin/env php
<?php

namespace Lkrms\Tests\Template;

use Lkrms\Err;
use Lkrms\Template\IExtensible;
use Lkrms\Template\IResolvable;
use Lkrms\Template\TConstructible;
use Lkrms\Template\TExtensible;
use Throwable;
use UnexpectedValueException;

$loader = require (__DIR__ . "/../../vendor/autoload.php");
$loader->addPsr4("Lkrms\\Tests\\", __DIR__ . "/..");

Err::handleErrors();

class A implements IExtensible
{
    use TConstructible, TExtensible;

    public $Id;

    public $Name;
}

class B extends A
{
    public $Data = [];
}

$exceptions = [];

$value1 = [
    "id"    => 1,
    "name"  => "Test entry",
    "DATA"  => [3, 4, 5],
    "DATA2" => [32, 42, 52],
];

$value2 = [
    "id"   => 2,
    "name" => "Another test entry",
    "DATA" => [13, 14, 15],
];

$value3 = [
    "id"   => 3,
    "name" => "One more test entry",
    "DATA" => [29, 27, 26],
];

$a = A::fromArray($value1);
$b = B::fromArray($value2);
$c = B::fromArray($value3);
$d = B::listFromArrays([$value1, $value2, $value3]);

try
{
    $e = B::listFromArrays([$value1, $value2, $c]);
}
catch (UnexpectedValueException $ex)
{
    $exceptions[] = $ex;
}

$a_id   = $a->Id;
$a_name = $a->Name;
$a_data = $a->Data;
$a_meta = $a->getMetaProperties();

$b_id   = $b->Id;
$b_name = $b->Name;
$b_data = $b->Data;

print_r([
    'a_set' => $a,
    'b_set' => $b,
    'a_get' => ['id' => $a_id, 'name' => $a_name, 'data' => $a_data, 'meta' => $a_meta],
    'b_get' => ['id' => $b_id, 'name' => $b_name, 'data' => $b_data],
    'd' => $d,

    // true
    'b == $d[1]' => $b == $d[1],

    // false
    'b === $d[1]' => $b === $d[1],

    'exceptions' => array_map(function (Throwable $ex) { return $ex->getMessage(); }, $exceptions),
]);
