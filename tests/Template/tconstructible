#!/usr/bin/env php
<?php

namespace Lkrms\Tests\Template;

use Lkrms\Concern\TConstructible;
use Lkrms\Concern\TExtensible;
use Lkrms\Concern\TReadable;
use Lkrms\Concern\TResolvable;
use Lkrms\Concern\TWritable;
use Lkrms\Container\Container;
use Lkrms\Contract\IExtensible;
use Lkrms\Contract\IReadable;
use Lkrms\Contract\IResolvable;
use Lkrms\Contract\IWritable;
use Lkrms\Err\Err;
use Throwable;
use UnexpectedValueException;

require __DIR__ . '/../../vendor/autoload.php';

Err::load();

class A implements IReadable, IWritable, IResolvable
{
    use TConstructible, TReadable, TWritable, TResolvable, TExtensible;

    public $Id;

    public $Name;
}

class B extends A implements IExtensible
{
    public $Data = [];
}

$exceptions = [];

$value1 = [
    'id' => 1,
    'name' => 'A',
];

$value2 = [
    'id' => 2,
    'name' => 'B',
    'DATA' => [0, 1, 2],
];

$value3 = [
    'id' => 3,
    'name' => 'C',
    'DATA' => [10, 11, 12],
    'DATA2' => [20, 21, 22],
];

Container::getGlobalContainer();

$a = A::construct($value1);
$b = B::construct($value2);
$c = B::construct($value3);
$d = iterator_to_array(B::constructList([$value1, $value2, $value3]));

try {
    $e = iterator_to_array(A::constructList([$value1, $value2, $value3]));
} catch (UnexpectedValueException $ex) {
    $exceptions[] = $ex;
}

$a_id = $a->Id;
$a_name = $a->Name;

$b_id = $b->Id;
$b_name = $b->Name;
$b_data = $b->Data;
$b_meta = $b->getMetaProperties();

print_r([
    'a_set' => $a,
    'b_set' => $b,
    'c_set' => $c,
    'a_get' => ['id' => $a_id, 'name' => $a_name],
    'b_get' => ['id' => $b_id, 'name' => $b_name, 'data' => $b_data, 'meta' => $b_meta],
    'd' => $d,
    'b == $d[1]' => $b == $d[1],  // true
    'b === $d[1]' => $b === $d[1],  // false
    'exceptions' => array_map(function (Throwable $ex) { return $ex->getMessage(); }, $exceptions),
]);
