#!/usr/bin/env php
<?php

namespace Lkrms\Tests;

use Dice\Dice;
use Lkrms\Concern\TService;
use Lkrms\Contract\IService;
use Lkrms\Err\Err;
use Lkrms\Facade\DI;
use UnexpectedValueException;

require __DIR__ . '/../vendor/autoload.php';

Err::load();

class IdGenerator
{
    private $counters = [];

    public function getNext(string $type)
    {
        $this->counters[$type] = $this->counters[$type] ?? 100 * (count($this->counters) + 1);

        return $this->counters[$type]++;
    }
}

class Office
{
    public $id;

    public $name;

    public function __construct(IdGenerator $idGenerator, string $name = null)
    {
        $this->id = $idGenerator->getNext(__CLASS__);
        $this->name = $name;
    }
}

class FancyOffice extends Office {}

class User
{
    public $id;

    public $office;

    public function __construct(IdGenerator $idGenerator, Office $office)
    {
        $this->id = $idGenerator->getNext(__CLASS__);
        $this->office = $office;
    }
}

class Staff extends User
{
    public $staffId;

    public function __construct(IdGenerator $idGenerator, Office $office)
    {
        parent::__construct($idGenerator, $office);
        $this->staffId = $idGenerator->getNext(__CLASS__);
    }
}

class DepartmentStaff extends Staff
{
    public $department;

    public function __construct(IdGenerator $idGenerator, Office $office, Department $department)
    {
        parent::__construct($idGenerator, $office);
        $this->department = $department;
    }
}

class Department
{
    use TService;

    public $id;

    public $mainOffice;

    public $name;

    public function __construct(IdGenerator $idGenerator, Office $mainOffice, $name = null)
    {
        $this->id = $idGenerator->getNext(__CLASS__);
        $this->mainOffice = $mainOffice;
        $this->name = $name;
    }
}

class OrgUnit implements IService
{
    use TService;

    public $mainOffice;

    public $department;

    public $manager;

    public $admin;

    public function __construct(Office $mainOffice, Department $department, Staff $manager, User $admin)
    {
        $this->mainOffice = $mainOffice;
        $this->department = $department;
        $this->manager = $manager;
        $this->admin = $admin;
    }

    public static function getContextualBindings(): array
    {
        // Resolve 'Office' to 'FancyOffice', etc.
        return [
            Office::class => FancyOffice::class,
            User::class => DepartmentStaff::class,
            Staff::class => DepartmentStaff::class,
        ];
    }
}

$exceptions = [];

DI::singleton(IdGenerator::class);

// Give 'Office' instances a sequential name
$offices = 0;
DI::bind(Office::class, null, [Dice::INSTANCE => function () use (&$offices) { return ['Office #' . (++$offices)]; }]);

// Create one 'Office' per 'User' and give each 'Department' the same name
DI::bind(User::class, null, null, [Office::class]);
DI::bind(Department::class, null, ['They Who Shall Not Be Named']);

// Register 'OrgUnit' bindings and create one 'Department' per 'OrgUnit'
DI::service(OrgUnit::class);
DI::bind(OrgUnit::class, null, null, [Department::class]);

try {
    // Should throw an exception because we're trying to add a substituted class
    // to $shareInstances
    DI::bind(OrgUnit::class, null, null, [Office::class]);
} catch (UnexpectedValueException $ex) {
    $exceptions[] = $ex;
}

// $user1 should be a 'User' instance
$user1 = DI::get(User::class);

// $user2 should be a 'DepartmentStaff' instance and 1 office should be created
$user2 = DI::inContextOf(OrgUnit::class)->get(User::class);

// $user3 should be a 'User' instance
$user3 = DI::get(User::class);

// User, Staff and Department IDs should all increment
$staff1 = DI::get(DepartmentStaff::class);
$staff2 = DI::get(DepartmentStaff::class);

// Department names should be applied to separate instances
$dept1 = DI::get(Department::class, ['English']);
$dept2 = DI::get(Department::class, ['Mathematics']);

// One department instance should be created per object tree
$orgUnit1 = DI::get(OrgUnit::class);
$orgUnit2 = DI::get(OrgUnit::class);

print_r([
    'exceptions' => $exceptions,
    'idGenerator' => DI::get(IdGenerator::class),
    'user1' => $user1,
    'user2' => $user2,
    'user3' => $user3,
    'staff1' => $staff1,
    'staff2' => $staff2,
    'dept1' => $dept1,
    'dept2' => $dept2,
    'orgUnit1' => $orgUnit1,
    'orgUnit2' => $orgUnit2,
]);
