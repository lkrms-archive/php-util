#!/usr/bin/env php
<?php

namespace Lkrms\Tests\Mixin;

use Lkrms\Err;
use Lkrms\Mixin\TSettable;
use RuntimeException;
use Throwable;
use UnexpectedValueException;

$loader = require (__DIR__ . "/../../vendor/autoload.php");
$loader->addPsr4("Lkrms\\Tests\\", __DIR__ . "/..");

Err::HandleErrors();

class A
{
    use TSettable;

    protected function _GetSettable()
    {
        return ['Id', 'Name'];
    }

    protected $Id;

    protected $Name;

    protected $Unwritable = "can't change me";
}

class B extends A
{
    protected function _GetData()
    {
        return $this->Data;
    }

    protected function _SetData($value)
    {
        $this->Data         = $value;
        $this->DataModified = time();
    }

    protected function _GetMeta($isset = false)
    {
        return $isset ? isset($this->Meta) : $this->Meta;
    }

    protected function _SetMeta($value, $unset = false)
    {
        if ($unset)
        {
            $this->Meta = null;
        }
        else
        {
            $this->Meta = $value;
        }
    }

    private $Data = [];

    private $Meta;

    protected $DataModified;

    private $DoNotEven;
}

class C
{
    use TSettable;

    protected function _GetGettable()
    {
        return [];
    }

    protected $Id = 0;

    protected $Name = "Hidden";
}

$exceptions = [];

$a       = new A();
$a->Id   = 1;
$a->Name = "Test entry";

$b       = new B();
$b->Id   = 2;
$b->Name = "Another test entry";
$b->Data = [3, 4, 5];

$c = new C();

$a_id         = $a->Id;
$a_name       = $a->Name;
$a_unwritable = $a->Unwritable;

$b_id            = $b->Id;
$b_name          = $b->Name;
$b_data          = $b->Data;
$b_data_modified = $b->DataModified;

$b_meta1 = [$b->Meta, 'isset' => isset($b->Meta), 'exists' => property_exists($b, "Meta")];
$b->Meta = [];
$b_meta2 = [$b->Meta, 'isset' => isset($b->Meta), 'exists' => property_exists($b, "Meta")];
unset($b->Meta);
$b_meta3 = [$b->Meta, 'isset' => isset($b->Meta), 'exists' => property_exists($b, "Meta")];

try
{
    $a->Unwritable = 'ok';
    throw new RuntimeException('Writing to $a->Unwritable was allowed');
}
catch (UnexpectedValueException $ex)
{
    $exceptions[] = $ex;
}

try
{
    $b->DoNotEven = 'ok';
    throw new RuntimeException('Writing to $b->DoNotEven was allowed');
}
catch (UnexpectedValueException $ex)
{
    $exceptions[] = $ex;
}

try
{
    $id = $c->Id;
    throw new RuntimeException('Reading from $c->Id was allowed');
}
catch (UnexpectedValueException $ex)
{
    $exceptions[] = $ex;
}

try
{
    $c->Id = 3;
    throw new RuntimeException('Writing to $c->Id was allowed');
}
catch (UnexpectedValueException $ex)
{
    $exceptions[] = $ex;
}

try
{
    isset($b->Data);
}
catch (UnexpectedValueException $ex)
{
    $exceptions[] = $ex;
}

print_r([
    'a_set' => $a,
    'b_set' => $b,
    'c_set' => $c,
    'a_get' => ['id' => $a_id, 'name' => $a_name, 'unwritable' => $a_unwritable],
    'b_get'             => [
        'id'            => $b_id,
        'name'          => $b_name,
        'data'          => $b_data,
        'data_modified' => $b_data_modified,
        'b_meta1'       => $b_meta1,
        'b_meta2'       => $b_meta2,
        'b_meta3'       => $b_meta3,
    ],
    'exceptions' => array_map(function (Throwable $ex) { return $ex->getMessage(); }, $exceptions)
]);
